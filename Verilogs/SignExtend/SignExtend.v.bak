module SignExtend(inputA, control, outputSE);
input [31:0] inputA;
input [2:0] control;
output reg [31:0] outputSE;


always @ (*)
	begin

	  case(control)
		  1://Sign extends halfword to word
		  begin
			 outputSE = (inputA[15]==1'b1)?{16'hffff, inputA[15:0]}: {16'h0, inputA[15:0]};
		  end
		  2://Sign extends byte to word
		  begin
			 outputSE = (inputA[7]==1'b1)?{24'hffffff, inputA[7:0]}: {24'h0, inputA[7:0]};
		  end
		  3://Zero extends halfword
		  begin
			 outputSE = {16'h0, inputA[15:0]}
		  end
		  4://Zero extends byte
		  begin
			 outputSE = {24'h0, inputA[7:0]};
		  end

		  default:
		  begin
			 outputSE=inputA;
		  end
		endcase
	end

endmodule
